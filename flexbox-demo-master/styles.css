/*
This is a good layout for a mobile-first CSS template.
Following this flow will minimize the number of styles you need to write and will ensure you are thinking, designing and developing mobile-first.
Most of your styles get written like standard CSS, but for your mobile presentation. Generally speaking, a good mobile presention will stretch out nicely for larger screens.

Sometimes, when we stretch out to larger screens, we need to make minor tweaks for the larger devices -- you can make these tweaks in the tablet media query, or if the issue exists on desktop only, the desktop media query.
You will find this is far easier than the opposite task of using CSS to cram your desktop experience into a mobile device.
*/
/*********************************************************************
 LOADS IN A NICE RESET TO ENSURE ALL BROWSERS HAVE THE SAME BASE STYLES
*********************************************************************/
@import url('https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css');

/*********************************************************************
  YOUR MOBILE/BASE STYLES GO HERE
*********************************************************************/
/* This is what is called a reset. Different browsers have different default padding and margins. Using the * reserts all depault elements to have zero padding and margin. */
* {
    box-sizing: border-box;
}



body,
html {
    /* Sets default font-size to 16px, ensuring 1em = 16px; */
    font-size: 16px;
}

/* Adds responsiveness to all images */
img {
    width: 100%;
}

.container {
    width: 100%;
    padding: 10px;
    /* Added a max-width so that this one style block works on all devices */
    max-width: 1200px;
    /* Margin to center the container when it's not the full width */
    margin: 0 auto;
    background-color: #FFCCCC;
}

.top {
    max-width: 100%;
    padding: 10px;
}

figure {
    margin: auto;
}

.main_img {
    width: 100%;
}

h1 {
    font-size: 2.5em;
    font-weight: 900;
    font-family: "Palatino Linotype", serif;
}

h2 {
    font-size: 1.4em;
    font-weight: 300;
    font-family: Helvetica, sans-serif;
}

h3.flex-hed {
    font-size: 1.5em;
    padding: 10px;
    font-family: "Palatino Linotype", serif;
}

h4.flex-hed {
  font-size: 1.5em;
  padding: 10px;
  font-family: "Palatino Linotype", serif;
}
/*
 * Cleaned up figure styles so that you had better control over image sizing throughout the page
 */
figure {
    display: block;
    width: 100%;
    max-width: 600px;

}

figcaption {
    font-size: 1.2em;
    padding: 10px;
    font-family: Helvetica, sans-serif;
}

.sub_cap {
    font-size: .8em;
}

.credit {
    color: gray;
}

.img_holder,
.text {
    font-size: 1.2em;
    padding: 20px;
    margin: 15px;
    background-color: #FFEBEB;
    font-family: Helvetica, sans-serif;
}
/* Style all font awesome icons */
.footer {
  text-align: center;
  background-color: #FFEBEB;
  padding: 10px;
}

.fa {
  padding: 20px;
  font-size: 30px;
  width: 60px;
  text-align: center;
  text-decoration: none;
  background: #FFEBEB;
  border-radius: 50%;
  border-color: black;
}

/* Add a hover effect if you want */
.fa:hover {
  opacity: 0.2;
}
/*********************************************************************
  YOUR TABLET/DESKTOP STYLES GO HERE
*********************************************************************/
@media(min-width: 681px) {

    /* Any adjustments for tablets and larger go here.
    Note these styles will be applied to anything 681px or larger -- so tablet AND desktop */
    /* Since you seem to want the flex elements to stack as normal on mobile, I just didn't define the flex
     * styles until tablet. Less code that way
     */
    .flex {
        /* Flex box styles go on the flex box element */
        display: flex;
        justify-content: space-between;
    }

    /* How you want content to flex goes on the elements that do the flexing */
    .img_holder {
        /* There are many ways to handle sizing, but flex-basis is the one that I like best for control.
         * There are three elements so I made it 30%. With justify content set to space between, the extra 3% per element will go to negative space
         * serving as gutters */
        flex-basis: 30%;
        font-size: 1.3em;
    }
}

/*********************************************************************
  YOUR DESKTOP-ONLY STYLES GO HERE
*********************************************************************/
@media(min-width: 780px) {

    /* Any adjustments for desktop and larger go here.
    Note these styles will be applied to anything 729px or larger -- so desktop */
    .text,
    .top {
        max-width: 800px;
        margin: auto;
    }
    .img_holder {
      flex-basis: 35%;
      font-size: 1.3em;
    }
}
